@model easyUTR.ViewModels.Items.ShoppingCartViewModel
@{
    ViewData["Title"] = "Shopping Cart";
}

<div class="container my-5">
    <h1 class="mb-4">Your Shopping Cart</h1>

    @if (Model.CartItems.Any())
    {
        <div class="table-responsive">
            <table class="table table-hover">
                <thead class="table-light">
                    <tr>
                        <th>Item</th>
                        <th>Location</th>
                        <th>Price</th>
                        <th>Quantity</th>
                        <th>Subtotal</th>
                        <th></th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var item in Model.CartItems)
                    {
                        <tr>
                            <td>
                                <div class="d-flex align-items-center">
                                    <img src="@item.Item.ItemImage" alt="@item.Item.ItemName" class="img-thumbnail me-3" style="width: 50px; height: 50px; object-fit: cover;">
                                    <span>@item.Item.ItemName</span>
                                </div>
                            </td>

                            <td>
                                @item.ItemStore?.StoreName
                            </td>

                            <td>
                                @item.ItemStore?.Price
                            </td>
                           
                            <td>
                                <div class="input-group" style="max-width: 120px;">
                                    <button class="btn btn-outline-secondary quantity-decrease" type="button" data-item-id="@item.Item.ItemId">-</button>
                                    <input type="number" class="form-control text-center quantity-input" value="@item.Quantity" min="1" data-item-id="@item.Item.ItemId">
                                    <button class="btn btn-outline-secondary quantity-increase" type="button" data-item-id="@item.Item.ItemId">+</button>
                                </div>
                            </td>

                            <td>
                                @(item.ItemStore?.Price * item.Quantity)
                            </td>
                           
                            <td>
                                <button class="btn btn-outline-danger btn-sm remove-item" data-item-id="@item.Item.ItemId">
                                    <i class="bi bi-trash"></i>
                                </button>
                            </td>
                        </tr>
                    }
                </tbody>
                <tfoot>
                    <tr class="table-light">
                        <td colspan="3" class="text-end"><strong>Total:  @Model.TotalPrice</strong></td>                           
                        <td></td>
                    </tr>
                </tfoot>
            </table>
        </div>

        <div class="d-flex justify-content-between align-items-center mt-4">
            <a asp-controller="Items" asp-action="Index" class="btn btn-outline-primary">
                <i class="bi bi-arrow-left me-2"></i>Continue Shopping
            </a>
            <form asp-action="Checkout" method="post">
                <a asp-action="Checkout" class="btn btn-success">
                    <i class="bi bi-credit-card me-2"></i>Proceed to Checkout
                </a>
            </form>
        </div>
    }
    else
    {
        <div class="alert alert-info" role="alert">
            Your shopping cart is empty. <a asp-controller="Items" asp-action="Index" class="alert-link">Start shopping</a>
        </div>
    }
</div>

@section Scripts {
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            const updateQuantity = async (itemId, newQuantity) => {
                try {
                    const response = await fetch('/Cart/UpdateQuantity', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                        },
                        body: JSON.stringify({ itemId, quantity: newQuantity }),
                    });

                    if (response.ok) {
                        location.reload();
                    } else {
                        alert('Failed to update quantity. Please try again.');
                    }
                } catch (error) {
                    console.error('Error:', error);
                    alert('An error occurred. Please try again.');
                }
            };

            document.querySelectorAll('.quantity-decrease').forEach(btn => {
                btn.addEventListener('click', () => {
                    const input = btn.nextElementSibling;
                    const newValue = Math.max(1, parseInt(input.value) - 1);
                    updateQuantity(input.dataset.itemId, newValue);
                });
            });

            document.querySelectorAll('.quantity-increase').forEach(btn => {
                btn.addEventListener('click', () => {
                    const input = btn.previousElementSibling;
                    const newValue = parseInt(input.value) + 1;
                    updateQuantity(input.dataset.itemId, newValue);
                });
            });

            document.querySelectorAll('.quantity-input').forEach(input => {
                input.addEventListener('change', () => {
                    const newValue = Math.max(1, parseInt(input.value));
                    updateQuantity(input.dataset.itemId, newValue);
                });
            });

            document.querySelectorAll('.remove-item').forEach(btn => {
                btn.addEventListener('click', async () => {
                    if (confirm('Are you sure you want to remove this item from your cart?')) {
                        try {
                            const response = await fetch(`/Cart/RemoveFromCart?itemId=${btn.dataset.itemId}`, {
                                method: 'POST',
                            });

                            if (response.ok) {
                                location.reload();
                            } else {
                                alert('Failed to remove item. Please try again.');
                            }
                        } catch (error) {
                            console.error('Error:', error);
                            alert('An error occurred. Please try again.');
                        }
                    }
                });
            });
        });
    </script>
}