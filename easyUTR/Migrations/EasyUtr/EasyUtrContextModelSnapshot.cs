// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using easyUTR.Data;

#nullable disable

namespace easyUTR.Migrations.EasyUtr
{
    [DbContext(typeof(EasyUtrContext))]
    partial class EasyUtrContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("easyUTR.Models.Address", b =>
                {
                    b.Property<int>("AddressId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("addressID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AddressId"));

                    b.Property<string>("AddressLine")
                        .IsRequired()
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("addressLine");

                    b.Property<decimal>("Latitude")
                        .HasColumnType("decimal(9, 6)")
                        .HasColumnName("latitude");

                    b.Property<decimal>("Longitude")
                        .HasColumnType("decimal(9, 6)")
                        .HasColumnName("longitude");

                    b.Property<string>("Postcode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("postcode");

                    b.Property<string>("Region")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("region");

                    b.Property<string>("Suburb")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("suburb");

                    b.HasKey("AddressId")
                        .HasName("Address_PK");

                    b.ToTable("Addresses");
                });

            modelBuilder.Entity("easyUTR.Models.Customer", b =>
                {
                    b.Property<string>("CustomerId")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("customerID");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("email");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("firstName");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("lastName");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)")
                        .HasColumnName("phoneNumber");

                    b.HasKey("CustomerId")
                        .HasName("Customer_PK");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("easyUTR.Models.CustomerOrder", b =>
                {
                    b.Property<int>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("orderID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderId"));

                    b.Property<string>("CustomerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("customerID");

                    b.Property<DateTime>("OrderTime")
                        .HasColumnType("datetime")
                        .HasColumnName("orderTime");

                    b.Property<DateTime>("PaidTime")
                        .HasColumnType("datetime")
                        .HasColumnName("paidTime");

                    b.HasKey("OrderId")
                        .HasName("CustomerOrder_PK");

                    b.HasIndex("CustomerId");

                    b.ToTable("CustomerOrders");
                });

            modelBuilder.Entity("easyUTR.Models.Item", b =>
                {
                    b.Property<int>("ItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("itemID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ItemId"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int")
                        .HasColumnName("categoryID");

                    b.Property<string>("ItemDescription")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("itemDescription");

                    b.Property<string>("ItemImage")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("itemImage");

                    b.Property<string>("ItemName")
                        .IsRequired()
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("itemName");

                    b.Property<int>("SupplierId")
                        .HasColumnType("int")
                        .HasColumnName("supplierID");

                    b.HasKey("ItemId")
                        .HasName("Item_PK");

                    b.HasIndex("CategoryId");

                    b.HasIndex("SupplierId");

                    b.ToTable("Items");
                });

            modelBuilder.Entity("easyUTR.Models.ItemCategory", b =>
                {
                    b.Property<int>("CategoryId")
                        .HasColumnType("int")
                        .HasColumnName("categoryID");

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("categoryName");

                    b.Property<int?>("ParentCategoryId")
                        .HasColumnType("int")
                        .HasColumnName("parentCategoryID");

                    b.HasKey("CategoryId")
                        .HasName("ItemCategory_PK");

                    b.ToTable("ItemCategories");
                });

            modelBuilder.Entity("easyUTR.Models.ItemsInOrder", b =>
                {
                    b.Property<int>("ItemId")
                        .HasColumnType("int")
                        .HasColumnName("itemID");

                    b.Property<int>("OrderId")
                        .HasColumnType("int")
                        .HasColumnName("orderID");

                    b.Property<int>("NumberOf")
                        .HasColumnType("int")
                        .HasColumnName("numberOf");

                    b.Property<decimal>("TotalItemCost")
                        .HasColumnType("decimal(10, 2)")
                        .HasColumnName("totalItemCost");

                    b.HasKey("ItemId", "OrderId")
                        .HasName("ItemsInOrder_PK");

                    b.HasIndex("OrderId");

                    b.ToTable("ItemsInOrder", (string)null);
                });

            modelBuilder.Entity("easyUTR.Models.ItemsInStore", b =>
                {
                    b.Property<int>("ItemId")
                        .HasColumnType("int")
                        .HasColumnName("itemID");

                    b.Property<int>("StoreId")
                        .HasColumnType("int")
                        .HasColumnName("storeID");

                    b.Property<int>("NumberInStock")
                        .HasColumnType("int")
                        .HasColumnName("numberInStock");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(10, 2)")
                        .HasColumnName("price");

                    b.HasKey("ItemId", "StoreId")
                        .HasName("ItemsInStore_PK");

                    b.HasIndex("StoreId");

                    b.ToTable("ItemsInStore", (string)null);
                });

            modelBuilder.Entity("easyUTR.Models.Job", b =>
                {
                    b.Property<int>("JobId")
                        .HasColumnType("int")
                        .HasColumnName("jobID");

                    b.Property<string>("JobName")
                        .IsRequired()
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("jobName");

                    b.HasKey("JobId")
                        .HasName("Job_PK");

                    b.ToTable("Jobs");
                });

            modelBuilder.Entity("easyUTR.Models.Staff", b =>
                {
                    b.Property<int>("StaffId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("staffID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StaffId"));

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("firstName");

                    b.Property<int>("JobId")
                        .HasColumnType("int")
                        .HasColumnName("jobID");

                    b.Property<int?>("JobLevel")
                        .HasColumnType("int")
                        .HasColumnName("jobLevel");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("lastName");

                    b.Property<int>("StoreId")
                        .HasColumnType("int")
                        .HasColumnName("storeID");

                    b.HasKey("StaffId")
                        .HasName("Staff_PK");

                    b.HasIndex("JobId");

                    b.HasIndex("StoreId");

                    b.ToTable("Staff");
                });

            modelBuilder.Entity("easyUTR.Models.Store", b =>
                {
                    b.Property<int>("StoreId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("storeID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StoreId"));

                    b.Property<int>("AddressId")
                        .HasColumnType("int")
                        .HasColumnName("addressID");

                    b.Property<string>("StoreDescription")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("storeDescription");

                    b.Property<string>("StoreImage")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("storeImage");

                    b.Property<string>("StoreName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("storeName");

                    b.HasKey("StoreId")
                        .HasName("Store_PK");

                    b.HasIndex("AddressId");

                    b.ToTable("Stores");
                });

            modelBuilder.Entity("easyUTR.Models.Supplier", b =>
                {
                    b.Property<int>("SupplierId")
                        .HasColumnType("int")
                        .HasColumnName("supplierID");

                    b.Property<string>("SupplierDescription")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("supplierDescription");

                    b.Property<string>("SupplierName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("supplierName");

                    b.Property<string>("SupplierUrl")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("supplierURL");

                    b.HasKey("SupplierId")
                        .HasName("Supplier_PK");

                    b.ToTable("Suppliers");
                });

            modelBuilder.Entity("easyUTR.Models.CustomerOrder", b =>
                {
                    b.HasOne("easyUTR.Models.Customer", "Customer")
                        .WithMany("CustomerOrders")
                        .HasForeignKey("CustomerId")
                        .IsRequired()
                        .HasConstraintName("CustomerOrder_Customer_FK");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("easyUTR.Models.Item", b =>
                {
                    b.HasOne("easyUTR.Models.ItemCategory", "Category")
                        .WithMany("Items")
                        .HasForeignKey("CategoryId")
                        .IsRequired()
                        .HasConstraintName("Item_ItemCategory_FK");

                    b.HasOne("easyUTR.Models.Supplier", "Supplier")
                        .WithMany("Items")
                        .HasForeignKey("SupplierId")
                        .IsRequired()
                        .HasConstraintName("Item_Supplier_FK");

                    b.Navigation("Category");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("easyUTR.Models.ItemsInOrder", b =>
                {
                    b.HasOne("easyUTR.Models.Item", "Item")
                        .WithMany("ItemsInOrders")
                        .HasForeignKey("ItemId")
                        .IsRequired()
                        .HasConstraintName("ItemsInOrder_Item_FK");

                    b.HasOne("easyUTR.Models.CustomerOrder", "Order")
                        .WithMany("ItemsInOrders")
                        .HasForeignKey("OrderId")
                        .IsRequired()
                        .HasConstraintName("ItemsInOrder_CustomerOrder_FK");

                    b.Navigation("Item");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("easyUTR.Models.ItemsInStore", b =>
                {
                    b.HasOne("easyUTR.Models.Item", "Item")
                        .WithMany("ItemsInStores")
                        .HasForeignKey("ItemId")
                        .IsRequired()
                        .HasConstraintName("ItemsInStore_Item_FK");

                    b.HasOne("easyUTR.Models.Store", "Store")
                        .WithMany("ItemsInStores")
                        .HasForeignKey("StoreId")
                        .IsRequired()
                        .HasConstraintName("ItemsInStore_Store_FK");

                    b.Navigation("Item");

                    b.Navigation("Store");
                });

            modelBuilder.Entity("easyUTR.Models.Staff", b =>
                {
                    b.HasOne("easyUTR.Models.Job", "Job")
                        .WithMany("Staff")
                        .HasForeignKey("JobId")
                        .IsRequired()
                        .HasConstraintName("Staff_Job_FK");

                    b.HasOne("easyUTR.Models.Store", "Store")
                        .WithMany("Staff")
                        .HasForeignKey("StoreId")
                        .IsRequired()
                        .HasConstraintName("Staff_Store_FK");

                    b.Navigation("Job");

                    b.Navigation("Store");
                });

            modelBuilder.Entity("easyUTR.Models.Store", b =>
                {
                    b.HasOne("easyUTR.Models.Address", "Address")
                        .WithMany("Stores")
                        .HasForeignKey("AddressId")
                        .IsRequired()
                        .HasConstraintName("Store_Address_FK");

                    b.Navigation("Address");
                });

            modelBuilder.Entity("easyUTR.Models.Address", b =>
                {
                    b.Navigation("Stores");
                });

            modelBuilder.Entity("easyUTR.Models.Customer", b =>
                {
                    b.Navigation("CustomerOrders");
                });

            modelBuilder.Entity("easyUTR.Models.CustomerOrder", b =>
                {
                    b.Navigation("ItemsInOrders");
                });

            modelBuilder.Entity("easyUTR.Models.Item", b =>
                {
                    b.Navigation("ItemsInOrders");

                    b.Navigation("ItemsInStores");
                });

            modelBuilder.Entity("easyUTR.Models.ItemCategory", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("easyUTR.Models.Job", b =>
                {
                    b.Navigation("Staff");
                });

            modelBuilder.Entity("easyUTR.Models.Store", b =>
                {
                    b.Navigation("ItemsInStores");

                    b.Navigation("Staff");
                });

            modelBuilder.Entity("easyUTR.Models.Supplier", b =>
                {
                    b.Navigation("Items");
                });
#pragma warning restore 612, 618
        }
    }
}
